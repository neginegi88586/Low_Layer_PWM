
Low_Layer_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000105c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001168  08001168  0002040c  2**0
                  CONTENTS
  4 .ARM          00000000  08001168  08001168  0002040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001168  08001168  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08001170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000040c  0800157c  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800157c  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002543  00000000  00000000  00020477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a9d  00000000  00000000  000229ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00023458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012d  00000000  00000000  00023608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ba2f  00000000  00000000  00023735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027fd  00000000  00000000  0002f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00045811  00000000  00000000  00031961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000488  00000000  00000000  00077174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000775fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000040c 	.word	0x2000040c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001100 	.word	0x08001100

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000410 	.word	0x20000410
 8000100:	08001100 	.word	0x08001100

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000220:	46c0      	nop			; (mov r8, r8)
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800022e:	4b3b      	ldr	r3, [pc, #236]	; (800031c <SystemCoreClockUpdate+0xf4>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	2238      	movs	r2, #56	; 0x38
 8000234:	4013      	ands	r3, r2
 8000236:	2b20      	cmp	r3, #32
 8000238:	d011      	beq.n	800025e <SystemCoreClockUpdate+0x36>
 800023a:	d849      	bhi.n	80002d0 <SystemCoreClockUpdate+0xa8>
 800023c:	2b18      	cmp	r3, #24
 800023e:	d009      	beq.n	8000254 <SystemCoreClockUpdate+0x2c>
 8000240:	d846      	bhi.n	80002d0 <SystemCoreClockUpdate+0xa8>
 8000242:	2b08      	cmp	r3, #8
 8000244:	d002      	beq.n	800024c <SystemCoreClockUpdate+0x24>
 8000246:	2b10      	cmp	r3, #16
 8000248:	d00e      	beq.n	8000268 <SystemCoreClockUpdate+0x40>
 800024a:	e041      	b.n	80002d0 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800024c:	4b34      	ldr	r3, [pc, #208]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 800024e:	4a35      	ldr	r2, [pc, #212]	; (8000324 <SystemCoreClockUpdate+0xfc>)
 8000250:	601a      	str	r2, [r3, #0]
      break;
 8000252:	e04f      	b.n	80002f4 <SystemCoreClockUpdate+0xcc>

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8000254:	4b32      	ldr	r3, [pc, #200]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 8000256:	22fa      	movs	r2, #250	; 0xfa
 8000258:	01d2      	lsls	r2, r2, #7
 800025a:	601a      	str	r2, [r3, #0]
      break;
 800025c:	e04a      	b.n	80002f4 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 800025e:	4b30      	ldr	r3, [pc, #192]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 8000260:	2280      	movs	r2, #128	; 0x80
 8000262:	0212      	lsls	r2, r2, #8
 8000264:	601a      	str	r2, [r3, #0]
      break;
 8000266:	e045      	b.n	80002f4 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_1:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000268:	4b2c      	ldr	r3, [pc, #176]	; (800031c <SystemCoreClockUpdate+0xf4>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	2203      	movs	r2, #3
 800026e:	4013      	ands	r3, r2
 8000270:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000272:	4b2a      	ldr	r3, [pc, #168]	; (800031c <SystemCoreClockUpdate+0xf4>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	091b      	lsrs	r3, r3, #4
 8000278:	2207      	movs	r2, #7
 800027a:	4013      	ands	r3, r2
 800027c:	3301      	adds	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL)           /* HSE used as PLL clock source */
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	2b03      	cmp	r3, #3
 8000284:	d106      	bne.n	8000294 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	4826      	ldr	r0, [pc, #152]	; (8000324 <SystemCoreClockUpdate+0xfc>)
 800028a:	f7ff ff3b 	bl	8000104 <__udivsi3>
 800028e:	0003      	movs	r3, r0
 8000290:	617b      	str	r3, [r7, #20]
 8000292:	e005      	b.n	80002a0 <SystemCoreClockUpdate+0x78>
      }
      else                              /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000294:	68f9      	ldr	r1, [r7, #12]
 8000296:	4824      	ldr	r0, [pc, #144]	; (8000328 <SystemCoreClockUpdate+0x100>)
 8000298:	f7ff ff34 	bl	8000104 <__udivsi3>
 800029c:	0003      	movs	r3, r0
 800029e:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <SystemCoreClockUpdate+0xf4>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	227f      	movs	r2, #127	; 0x7f
 80002a8:	401a      	ands	r2, r3
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	4353      	muls	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <SystemCoreClockUpdate+0xf4>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0f5b      	lsrs	r3, r3, #29
 80002b6:	2207      	movs	r2, #7
 80002b8:	4013      	ands	r3, r2
 80002ba:	3301      	adds	r3, #1
 80002bc:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 80002be:	68b9      	ldr	r1, [r7, #8]
 80002c0:	6978      	ldr	r0, [r7, #20]
 80002c2:	f7ff ff1f 	bl	8000104 <__udivsi3>
 80002c6:	0003      	movs	r3, r0
 80002c8:	001a      	movs	r2, r3
 80002ca:	4b15      	ldr	r3, [pc, #84]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 80002cc:	601a      	str	r2, [r3, #0]
      break;
 80002ce:	e011      	b.n	80002f4 <SystemCoreClockUpdate+0xcc>
      
    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <SystemCoreClockUpdate+0xf4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	0adb      	lsrs	r3, r3, #11
 80002d6:	2207      	movs	r2, #7
 80002d8:	4013      	ands	r3, r2
 80002da:	2201      	movs	r2, #1
 80002dc:	409a      	lsls	r2, r3
 80002de:	0013      	movs	r3, r2
 80002e0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	4810      	ldr	r0, [pc, #64]	; (8000328 <SystemCoreClockUpdate+0x100>)
 80002e6:	f7ff ff0d 	bl	8000104 <__udivsi3>
 80002ea:	0003      	movs	r3, r0
 80002ec:	001a      	movs	r2, r3
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 80002f0:	601a      	str	r2, [r3, #0]
      break;
 80002f2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <SystemCoreClockUpdate+0xf4>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	220f      	movs	r2, #15
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SystemCoreClockUpdate+0x104>)
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	58d3      	ldr	r3, [r2, r3]
 8000304:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	40da      	lsrs	r2, r3
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xf8>)
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b006      	add	sp, #24
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	40021000 	.word	0x40021000
 8000320:	20000000 	.word	0x20000000
 8000324:	007a1200 	.word	0x007a1200
 8000328:	00f42400 	.word	0x00f42400
 800032c:	08001118 	.word	0x08001118

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b7f      	cmp	r3, #127	; 0x7f
 8000344:	d828      	bhi.n	8000398 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	4a2f      	ldr	r2, [pc, #188]	; (8000404 <__NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b25b      	sxtb	r3, r3
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	33c0      	adds	r3, #192	; 0xc0
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	589b      	ldr	r3, [r3, r2]
 8000356:	1dfa      	adds	r2, r7, #7
 8000358:	7812      	ldrb	r2, [r2, #0]
 800035a:	0011      	movs	r1, r2
 800035c:	2203      	movs	r2, #3
 800035e:	400a      	ands	r2, r1
 8000360:	00d2      	lsls	r2, r2, #3
 8000362:	21ff      	movs	r1, #255	; 0xff
 8000364:	4091      	lsls	r1, r2
 8000366:	000a      	movs	r2, r1
 8000368:	43d2      	mvns	r2, r2
 800036a:	401a      	ands	r2, r3
 800036c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	019b      	lsls	r3, r3, #6
 8000372:	22ff      	movs	r2, #255	; 0xff
 8000374:	401a      	ands	r2, r3
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	0018      	movs	r0, r3
 800037c:	2303      	movs	r3, #3
 800037e:	4003      	ands	r3, r0
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000384:	481f      	ldr	r0, [pc, #124]	; (8000404 <__NVIC_SetPriority+0xd4>)
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b25b      	sxtb	r3, r3
 800038c:	089b      	lsrs	r3, r3, #2
 800038e:	430a      	orrs	r2, r1
 8000390:	33c0      	adds	r3, #192	; 0xc0
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000396:	e031      	b.n	80003fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <__NVIC_SetPriority+0xd8>)
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	0019      	movs	r1, r3
 80003a0:	230f      	movs	r3, #15
 80003a2:	400b      	ands	r3, r1
 80003a4:	3b08      	subs	r3, #8
 80003a6:	089b      	lsrs	r3, r3, #2
 80003a8:	3306      	adds	r3, #6
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	18d3      	adds	r3, r2, r3
 80003ae:	3304      	adds	r3, #4
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	1dfa      	adds	r2, r7, #7
 80003b4:	7812      	ldrb	r2, [r2, #0]
 80003b6:	0011      	movs	r1, r2
 80003b8:	2203      	movs	r2, #3
 80003ba:	400a      	ands	r2, r1
 80003bc:	00d2      	lsls	r2, r2, #3
 80003be:	21ff      	movs	r1, #255	; 0xff
 80003c0:	4091      	lsls	r1, r2
 80003c2:	000a      	movs	r2, r1
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	401a      	ands	r2, r3
 80003c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	019b      	lsls	r3, r3, #6
 80003ce:	22ff      	movs	r2, #255	; 0xff
 80003d0:	401a      	ands	r2, r3
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	0018      	movs	r0, r3
 80003d8:	2303      	movs	r3, #3
 80003da:	4003      	ands	r3, r0
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <__NVIC_SetPriority+0xd8>)
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	001c      	movs	r4, r3
 80003e8:	230f      	movs	r3, #15
 80003ea:	4023      	ands	r3, r4
 80003ec:	3b08      	subs	r3, #8
 80003ee:	089b      	lsrs	r3, r3, #2
 80003f0:	430a      	orrs	r2, r1
 80003f2:	3306      	adds	r3, #6
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	18c3      	adds	r3, r0, r3
 80003f8:	3304      	adds	r3, #4
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b003      	add	sp, #12
 8000402:	bd90      	pop	{r4, r7, pc}
 8000404:	e000e100 	.word	0xe000e100
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	1e5a      	subs	r2, r3, #1
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	045b      	lsls	r3, r3, #17
 800041c:	429a      	cmp	r2, r3
 800041e:	d301      	bcc.n	8000424 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000420:	2301      	movs	r3, #1
 8000422:	e010      	b.n	8000446 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <SysTick_Config+0x44>)
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	3a01      	subs	r2, #1
 800042a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800042c:	2301      	movs	r3, #1
 800042e:	425b      	negs	r3, r3
 8000430:	2103      	movs	r1, #3
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff ff7c 	bl	8000330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <SysTick_Config+0x44>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <SysTick_Config+0x44>)
 8000440:	2207      	movs	r2, #7
 8000442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000444:	2300      	movs	r3, #0
}
 8000446:	0018      	movs	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	e000e010 	.word	0xe000e010

08000454 <System_Config>:

/*
 * クロック制御関数の本体を定義する場所。
 */
ErrorStatus_t System_Config(const uint32_t tick_prio)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	uint32_t tick = ((uint32_t)(SystemCoreClock / 1000));
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <System_Config+0x54>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	22fa      	movs	r2, #250	; 0xfa
 8000462:	0091      	lsls	r1, r2, #2
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff fe4d 	bl	8000104 <__udivsi3>
 800046a:	0003      	movs	r3, r0
 800046c:	60fb      	str	r3, [r7, #12]
	if(SysTick_Config(tick) != Ret_OK)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ffcb 	bl	800040c <SysTick_Config>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <System_Config+0x2a>
	{
		return Ret_Error;
 800047a:	2301      	movs	r3, #1
 800047c:	e00f      	b.n	800049e <System_Config+0x4a>
	}
	else
	{
		if(tick_prio < (1UL << __NVIC_PRIO_BITS))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d80b      	bhi.n	800049c <System_Config+0x48>
		{
			NVIC_SetPriority(SysTick_IRQn, tick_prio);
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	2301      	movs	r3, #1
 8000488:	425b      	negs	r3, r3
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ff4f 	bl	8000330 <__NVIC_SetPriority>
			sys_tick_priority = tick_prio;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <System_Config+0x58>)
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	601a      	str	r2, [r3, #0]
		{
			return Ret_Error;
		}
	}

	return Ret_OK;
 8000498:	2300      	movs	r3, #0
 800049a:	e000      	b.n	800049e <System_Config+0x4a>
			return Ret_Error;
 800049c:	2301      	movs	r3, #1
}
 800049e:	0018      	movs	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b004      	add	sp, #16
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000004 	.word	0x20000004

080004b0 <Tick_Count>:

void Tick_Count(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	sys_tick_counter += 1;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <Tick_Count+0x14>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	1c5a      	adds	r2, r3, #1
 80004ba:	4b02      	ldr	r3, [pc, #8]	; (80004c4 <Tick_Count+0x14>)
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000428 	.word	0x20000428

080004c8 <Program_Delay>:

void Program_Delay(const uint32_t delay_time)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint32_t start_tick;
	if((sys_tick_counter + delay_time) > 4294967290)
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <Program_Delay+0x3c>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	3306      	adds	r3, #6
 80004da:	d902      	bls.n	80004e2 <Program_Delay+0x1a>
	{
		sys_tick_counter = 0;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <Program_Delay+0x3c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
	}

	start_tick = sys_tick_counter;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <Program_Delay+0x3c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	60fb      	str	r3, [r7, #12]
	while((sys_tick_counter - start_tick) < delay_time);
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <Program_Delay+0x3c>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d8f8      	bhi.n	80004ea <Program_Delay+0x22>
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000428 	.word	0x20000428

08000508 <OSC_Conf>:

ErrorStatus_t OSC_Conf(const OSC_Config_t* osc_parameter)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	uint32_t start_tick;
	uint32_t tmp_sysclk_src;
	uint32_t tmp_pllclk_cfg;

	if(((osc_parameter->OSC_TYP) & RCC_CR_HSION) == RCC_CR_HSION)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4013      	ands	r3, r2
 800051a:	d020      	beq.n	800055e <OSC_Conf+0x56>
	{
		tmp_sysclk_src = ((RCC->CFGR) & RCC_CFGR_SWS);
 800051c:	4b4b      	ldr	r3, [pc, #300]	; (800064c <OSC_Conf+0x144>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	2238      	movs	r2, #56	; 0x38
 8000522:	4013      	ands	r3, r2
 8000524:	617b      	str	r3, [r7, #20]
		tmp_pllclk_cfg = ((uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC));
 8000526:	4b49      	ldr	r3, [pc, #292]	; (800064c <OSC_Conf+0x144>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	2203      	movs	r2, #3
 800052c:	4013      	ands	r3, r2
 800052e:	613b      	str	r3, [r7, #16]

		if(((tmp_sysclk_src == RCC_CFGR_SWS_1) && (tmp_pllclk_cfg == RCC_PLLCFGR_PLLSRC_HSI)) || tmp_sysclk_src == 0x00U)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b10      	cmp	r3, #16
 8000534:	d102      	bne.n	800053c <OSC_Conf+0x34>
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d002      	beq.n	8000542 <OSC_Conf+0x3a>
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10d      	bne.n	800055e <OSC_Conf+0x56>
		{
			if(((RCC->CR) & RCC_CR_HSIRDY) != 0 && ((osc_parameter->OSC_TYP) & RCC_CR_HSION) == 0x00)
 8000542:	4b42      	ldr	r3, [pc, #264]	; (800064c <OSC_Conf+0x144>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	4013      	ands	r3, r2
 800054c:	d007      	beq.n	800055e <OSC_Conf+0x56>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4013      	ands	r3, r2
 8000558:	d101      	bne.n	800055e <OSC_Conf+0x56>
			{
				return Ret_Error;
 800055a:	2301      	movs	r3, #1
 800055c:	e071      	b.n	8000642 <OSC_Conf+0x13a>

			}
		}
	}

	if((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLLRCLK)
 800055e:	4b3b      	ldr	r3, [pc, #236]	; (800064c <OSC_Conf+0x144>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	4013      	ands	r3, r2
 8000566:	2b10      	cmp	r3, #16
 8000568:	d06a      	beq.n	8000640 <OSC_Conf+0x138>
	{
		if(((osc_parameter->OSC_TYP) & RCC_CR_PLLON) == RCC_CR_PLLON)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	045b      	lsls	r3, r3, #17
 8000572:	4013      	ands	r3, r2
 8000574:	d064      	beq.n	8000640 <OSC_Conf+0x138>
		{
			RCC->CR &= (~(RCC_CR_PLLON));
 8000576:	4b35      	ldr	r3, [pc, #212]	; (800064c <OSC_Conf+0x144>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <OSC_Conf+0x144>)
 800057c:	4934      	ldr	r1, [pc, #208]	; (8000650 <OSC_Conf+0x148>)
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

			start_tick = sys_tick_counter;
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <OSC_Conf+0x14c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60fb      	str	r3, [r7, #12]
			while(((RCC->CR) & RCC_CR_PLLRDY) == RCC_CR_PLLRDY)
 8000588:	e008      	b.n	800059c <OSC_Conf+0x94>
			{
				if((sys_tick_counter - start_tick) > PLL_TIMEOUT_VALUE)
 800058a:	4b32      	ldr	r3, [pc, #200]	; (8000654 <OSC_Conf+0x14c>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	2202      	movs	r2, #2
 8000594:	4293      	cmp	r3, r2
 8000596:	d901      	bls.n	800059c <OSC_Conf+0x94>
				{
					return Ret_Timeout;
 8000598:	2304      	movs	r3, #4
 800059a:	e052      	b.n	8000642 <OSC_Conf+0x13a>
			while(((RCC->CR) & RCC_CR_PLLRDY) == RCC_CR_PLLRDY)
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <OSC_Conf+0x144>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	049b      	lsls	r3, r3, #18
 80005a4:	401a      	ands	r2, r3
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	049b      	lsls	r3, r3, #18
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d0ed      	beq.n	800058a <OSC_Conf+0x82>
				}
			}

			RCC->PLLCFGR = (((osc_parameter->PLL.PLLR) << RCC_PLLCFGR_PLLR_Pos)| ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLREN_Msk) |
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c9b      	ldrb	r3, [r3, #18]
 80005b2:	075b      	lsls	r3, r3, #29
 80005b4:	0019      	movs	r1, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	055b      	lsls	r3, r3, #21
 80005be:	4013      	ands	r3, r2
 80005c0:	430b      	orrs	r3, r1
					((osc_parameter->PLL.PLLQ) << RCC_PLLCFGR_PLLQ_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLQEN_Msk) |
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7cd2      	ldrb	r2, [r2, #19]
 80005c6:	0652      	lsls	r2, r2, #25
			RCC->PLLCFGR = (((osc_parameter->PLL.PLLR) << RCC_PLLCFGR_PLLR_Pos)| ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLREN_Msk) |
 80005c8:	431a      	orrs	r2, r3
					((osc_parameter->PLL.PLLQ) << RCC_PLLCFGR_PLLQ_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLQEN_Msk) |
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68d9      	ldr	r1, [r3, #12]
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	045b      	lsls	r3, r3, #17
 80005d2:	400b      	ands	r3, r1
 80005d4:	4313      	orrs	r3, r2
					((osc_parameter->PLL.PLLP) << RCC_PLLCFGR_PLLP_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLPEN_Msk) |
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7d12      	ldrb	r2, [r2, #20]
 80005da:	0452      	lsls	r2, r2, #17
					((osc_parameter->PLL.PLLQ) << RCC_PLLCFGR_PLLQ_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLQEN_Msk) |
 80005dc:	431a      	orrs	r2, r3
					((osc_parameter->PLL.PLLP) << RCC_PLLCFGR_PLLP_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLPEN_Msk) |
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68d9      	ldr	r1, [r3, #12]
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	400b      	ands	r3, r1
 80005e8:	4313      	orrs	r3, r2
					((osc_parameter->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) | ((osc_parameter->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) | ((osc_parameter->PLL.PLL_SRC)));
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7c12      	ldrb	r2, [r2, #16]
 80005ee:	0212      	lsls	r2, r2, #8
					((osc_parameter->PLL.PLLP) << RCC_PLLCFGR_PLLP_Pos) | ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLPEN_Msk) |
 80005f0:	4313      	orrs	r3, r2
					((osc_parameter->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) | ((osc_parameter->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) | ((osc_parameter->PLL.PLL_SRC)));
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7c52      	ldrb	r2, [r2, #17]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	431a      	orrs	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a1b      	ldrb	r3, [r3, #8]
 80005fe:	0019      	movs	r1, r3
			RCC->PLLCFGR = (((osc_parameter->PLL.PLLR) << RCC_PLLCFGR_PLLR_Pos)| ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLREN_Msk) |
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <OSC_Conf+0x144>)
					((osc_parameter->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) | ((osc_parameter->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) | ((osc_parameter->PLL.PLL_SRC)));
 8000602:	430a      	orrs	r2, r1
			RCC->PLLCFGR = (((osc_parameter->PLL.PLLR) << RCC_PLLCFGR_PLLR_Pos)| ((osc_parameter->PLL.PLL_EN) & RCC_PLLCFGR_PLLREN_Msk) |
 8000604:	60da      	str	r2, [r3, #12]

			RCC->CR |= RCC_CR_PLLON;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <OSC_Conf+0x144>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <OSC_Conf+0x144>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0449      	lsls	r1, r1, #17
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]

			start_tick = sys_tick_counter;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <OSC_Conf+0x14c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
			while(((RCC->CR) & RCC_CR_PLLRDY) != RCC_CR_PLLRDY)
 800061a:	e008      	b.n	800062e <OSC_Conf+0x126>
			{
				if((sys_tick_counter - start_tick) > PLL_TIMEOUT_VALUE)
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <OSC_Conf+0x14c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	2202      	movs	r2, #2
 8000626:	4293      	cmp	r3, r2
 8000628:	d901      	bls.n	800062e <OSC_Conf+0x126>
				{
					return Ret_Timeout;
 800062a:	2304      	movs	r3, #4
 800062c:	e009      	b.n	8000642 <OSC_Conf+0x13a>
			while(((RCC->CR) & RCC_CR_PLLRDY) != RCC_CR_PLLRDY)
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <OSC_Conf+0x144>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	049b      	lsls	r3, r3, #18
 8000636:	401a      	ands	r2, r3
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	049b      	lsls	r3, r3, #18
 800063c:	429a      	cmp	r2, r3
 800063e:	d1ed      	bne.n	800061c <OSC_Conf+0x114>
				}
			}
		}
	}

	return Ret_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b006      	add	sp, #24
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000
 8000650:	feffffff 	.word	0xfeffffff
 8000654:	20000428 	.word	0x20000428

08000658 <CLK_Conf>:

ErrorStatus_t CLK_Conf(const Clock_Config_t* clk_parameter, const uint8_t f_latency)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	000a      	movs	r2, r1
 8000662:	1cfb      	adds	r3, r7, #3
 8000664:	701a      	strb	r2, [r3, #0]
	uint32_t start_tick;

	if(f_latency > ((FLASH->ACR) & FLASH_ACR_LATENCY))
 8000666:	1cfb      	adds	r3, r7, #3
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <CLK_Conf+0xf0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2107      	movs	r1, #7
 8000670:	400b      	ands	r3, r1
 8000672:	429a      	cmp	r2, r3
 8000674:	d91d      	bls.n	80006b2 <CLK_Conf+0x5a>
	{
		FLASH->ACR |= (f_latency & FLASH_ACR_LATENCY);
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <CLK_Conf+0xf0>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	1cfb      	adds	r3, r7, #3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2207      	movs	r2, #7
 8000680:	401a      	ands	r2, r3
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <CLK_Conf+0xf0>)
 8000684:	430a      	orrs	r2, r1
 8000686:	601a      	str	r2, [r3, #0]

		start_tick = sys_tick_counter;
 8000688:	4b30      	ldr	r3, [pc, #192]	; (800074c <CLK_Conf+0xf4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
		while(((FLASH->ACR) & FLASH_ACR_LATENCY) != f_latency)
 800068e:	e008      	b.n	80006a2 <CLK_Conf+0x4a>
		{
			if((sys_tick_counter - start_tick) > CLK_SWS_TIMEOUT_VALUE)
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <CLK_Conf+0xf4>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <CLK_Conf+0xf8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d901      	bls.n	80006a2 <CLK_Conf+0x4a>
			{
				return Ret_Timeout;
 800069e:	2304      	movs	r3, #4
 80006a0:	e04e      	b.n	8000740 <CLK_Conf+0xe8>
		while(((FLASH->ACR) & FLASH_ACR_LATENCY) != f_latency)
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <CLK_Conf+0xf0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2207      	movs	r2, #7
 80006a8:	401a      	ands	r2, r3
 80006aa:	1cfb      	adds	r3, r7, #3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d1ee      	bne.n	8000690 <CLK_Conf+0x38>
			}
		}
	}

	if(((clk_parameter->SysCLK_SRC) & RCC_CFGR_SW_Msk) == RCC_CFGR_SW_1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	001a      	movs	r2, r3
 80006b8:	2307      	movs	r3, #7
 80006ba:	4013      	ands	r3, r2
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d137      	bne.n	8000730 <CLK_Conf+0xd8>
	{
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, (RCC_CFGR_PPRE_0 | RCC_CFGR_PPRE_1 | RCC_CFGR_PPRE_2));
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <CLK_Conf+0xfc>)
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <CLK_Conf+0xfc>)
 80006c6:	21e0      	movs	r1, #224	; 0xe0
 80006c8:	01c9      	lsls	r1, r1, #7
 80006ca:	430a      	orrs	r2, r1
 80006cc:	609a      	str	r2, [r3, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, clk_parameter->AHB_PSC << 8);
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <CLK_Conf+0xfc>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <CLK_Conf+0x100>)
 80006d4:	401a      	ands	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	0019      	movs	r1, r3
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <CLK_Conf+0xfc>)
 80006e0:	430a      	orrs	r2, r1
 80006e2:	609a      	str	r2, [r3, #8]

		if(((RCC->CR) & RCC_CR_PLLRDY_Msk) == 0)
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <CLK_Conf+0xfc>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	049b      	lsls	r3, r3, #18
 80006ec:	4013      	ands	r3, r2
 80006ee:	d101      	bne.n	80006f4 <CLK_Conf+0x9c>
		{
			return Ret_Error;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e025      	b.n	8000740 <CLK_Conf+0xe8>
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, (clk_parameter->SysCLK_SRC) << RCC_CFGR_SW_Pos);
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <CLK_Conf+0xfc>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	2207      	movs	r2, #7
 80006fa:	4393      	bics	r3, r2
 80006fc:	001a      	movs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	0019      	movs	r1, r3
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <CLK_Conf+0xfc>)
 8000706:	430a      	orrs	r2, r1
 8000708:	609a      	str	r2, [r3, #8]

		start_tick = sys_tick_counter;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <CLK_Conf+0xf4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	60fb      	str	r3, [r7, #12]

		while(((RCC->CFGR) & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLLRCLK)
 8000710:	e008      	b.n	8000724 <CLK_Conf+0xcc>
		{
			if((sys_tick_counter - start_tick) > CLK_SWS_TIMEOUT_VALUE)
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <CLK_Conf+0xf4>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <CLK_Conf+0xf8>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d901      	bls.n	8000724 <CLK_Conf+0xcc>
			{
				return Ret_Timeout;
 8000720:	2304      	movs	r3, #4
 8000722:	e00d      	b.n	8000740 <CLK_Conf+0xe8>
		while(((RCC->CFGR) & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLLRCLK)
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <CLK_Conf+0xfc>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2238      	movs	r2, #56	; 0x38
 800072a:	4013      	ands	r3, r2
 800072c:	2b10      	cmp	r3, #16
 800072e:	d1f0      	bne.n	8000712 <CLK_Conf+0xba>
			}
		}
	}

	SystemCoreClockUpdate();
 8000730:	f7ff fd7a 	bl	8000228 <SystemCoreClockUpdate>


	return System_Config(sys_tick_priority);
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <CLK_Conf+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff fe8b 	bl	8000454 <System_Config>
 800073e:	0003      	movs	r3, r0
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b004      	add	sp, #16
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40022000 	.word	0x40022000
 800074c:	20000428 	.word	0x20000428
 8000750:	00001388 	.word	0x00001388
 8000754:	40021000 	.word	0x40021000
 8000758:	fffff0ff 	.word	0xfffff0ff
 800075c:	20000004 	.word	0x20000004

08000760 <NMI_Handler>:
/*
 * 割り込みハンドラ関数の本体を定義する場所。
 * 関数名はプロトタイプ宣言時に割り当てたエイリアス属性を参照すること。
 */
void NonMaskable_Int(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	while(1);
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault>:
}

void HardFault(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
	while(1);
 800076a:	e7fe      	b.n	800076a <HardFault+0x4>

0800076c <SysTick_Handler>:
}

void SystemTimer_Int(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	Tick_Count();
 8000770:	f7ff fe9e 	bl	80004b0 <Tick_Count>
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <TIM16_IRQHandler>:

void TIM16_Int(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Timer_IT_Handler(&tim16_handle);
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <TIM16_IRQHandler+0x14>)
 8000782:	0018      	movs	r0, r3
 8000784:	f000 fc49 	bl	800101a <Timer_IT_Handler>
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	2000042c 	.word	0x2000042c

08000794 <TIM17_IRQHandler>:

void TIM17_Int(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	Timer_IT_Handler(&tim17_handle);
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <TIM17_IRQHandler+0x14>)
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fc3d 	bl	800101a <Timer_IT_Handler>
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000448 	.word	0x20000448

080007ac <IO_Port_Conf>:

/*
 * IOポート制御関数の本体を定義する場所。
 */
void IO_Port_Conf(const IO_Port_Config_t *io_port_parameter)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef *IO_PORTx = io_port_parameter->Inst;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < 16; i++)
 80007ba:	230f      	movs	r3, #15
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e094      	b.n	80008ee <IO_Port_Conf+0x142>
	{
		if(((io_port_parameter->IO_BIT) & (1 << i)) == (1 << i))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	889b      	ldrh	r3, [r3, #4]
 80007c8:	0019      	movs	r1, r3
 80007ca:	200f      	movs	r0, #15
 80007cc:	183b      	adds	r3, r7, r0
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	409a      	lsls	r2, r3
 80007d4:	0013      	movs	r3, r2
 80007d6:	400b      	ands	r3, r1
 80007d8:	001a      	movs	r2, r3
 80007da:	183b      	adds	r3, r7, r0
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4099      	lsls	r1, r3
 80007e2:	000b      	movs	r3, r1
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d000      	beq.n	80007ea <IO_Port_Conf+0x3e>
 80007e8:	e07b      	b.n	80008e2 <IO_Port_Conf+0x136>
		{
			if(((IO_PORTx->MODER) & (0x3 << SHIFT_NUM_2[i])) != ((io_port_parameter->IO_MODE) & (0x3 << SHIFT_NUM_2[i])))
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	4053      	eors	r3, r2
 80007f4:	183a      	adds	r2, r7, r0
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4942      	ldr	r1, [pc, #264]	; (8000904 <IO_Port_Conf+0x158>)
 80007fa:	5c8a      	ldrb	r2, [r1, r2]
 80007fc:	0011      	movs	r1, r2
 80007fe:	2203      	movs	r2, #3
 8000800:	408a      	lsls	r2, r1
 8000802:	4013      	ands	r3, r2
 8000804:	d01b      	beq.n	800083e <IO_Port_Conf+0x92>
			{
				IO_PORTx->MODER &= (~(0x3 << SHIFT_NUM_2[i]));
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	183a      	adds	r2, r7, r0
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	493d      	ldr	r1, [pc, #244]	; (8000904 <IO_Port_Conf+0x158>)
 8000810:	5c8a      	ldrb	r2, [r1, r2]
 8000812:	0011      	movs	r1, r2
 8000814:	2203      	movs	r2, #3
 8000816:	408a      	lsls	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	601a      	str	r2, [r3, #0]
				IO_PORTx->MODER |= ((io_port_parameter->IO_MODE) & (0x3 << SHIFT_NUM_2[i]));
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	1839      	adds	r1, r7, r0
 800082a:	7809      	ldrb	r1, [r1, #0]
 800082c:	4835      	ldr	r0, [pc, #212]	; (8000904 <IO_Port_Conf+0x158>)
 800082e:	5c41      	ldrb	r1, [r0, r1]
 8000830:	0008      	movs	r0, r1
 8000832:	2103      	movs	r1, #3
 8000834:	4081      	lsls	r1, r0
 8000836:	400b      	ands	r3, r1
 8000838:	431a      	orrs	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	601a      	str	r2, [r3, #0]
			}
			if(((IO_PORTx->OTYPER) & (1 << i)) != ((io_port_parameter->Out_TYPE) & (1 << i)))
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4053      	eors	r3, r2
 8000848:	200f      	movs	r0, #15
 800084a:	183a      	adds	r2, r7, r0
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	2101      	movs	r1, #1
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	4013      	ands	r3, r2
 8000856:	d017      	beq.n	8000888 <IO_Port_Conf+0xdc>
			{
				IO_PORTx->OTYPER &= (~(1 << i));
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	183a      	adds	r2, r7, r0
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	2101      	movs	r1, #1
 8000862:	4091      	lsls	r1, r2
 8000864:	000a      	movs	r2, r1
 8000866:	43d2      	mvns	r2, r2
 8000868:	401a      	ands	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	605a      	str	r2, [r3, #4]
				IO_PORTx->OTYPER |= ((io_port_parameter->Out_TYPE) & (1 << i));
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	1839      	adds	r1, r7, r0
 8000878:	7809      	ldrb	r1, [r1, #0]
 800087a:	2001      	movs	r0, #1
 800087c:	4088      	lsls	r0, r1
 800087e:	0001      	movs	r1, r0
 8000880:	400b      	ands	r3, r1
 8000882:	431a      	orrs	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	605a      	str	r2, [r3, #4]
			}
			if(((IO_PORTx->OSPEEDR) & (0x3 << SHIFT_NUM_2[i])) != ((io_port_parameter->Out_SPEED) & (0x3 << SHIFT_NUM_2[i])))
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	4053      	eors	r3, r2
 8000892:	200f      	movs	r0, #15
 8000894:	183a      	adds	r2, r7, r0
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	491a      	ldr	r1, [pc, #104]	; (8000904 <IO_Port_Conf+0x158>)
 800089a:	5c8a      	ldrb	r2, [r1, r2]
 800089c:	0011      	movs	r1, r2
 800089e:	2203      	movs	r2, #3
 80008a0:	408a      	lsls	r2, r1
 80008a2:	4013      	ands	r3, r2
 80008a4:	d01b      	beq.n	80008de <IO_Port_Conf+0x132>
			{
				IO_PORTx->OSPEEDR &= (~(0x3 << SHIFT_NUM_2[i]));
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	183a      	adds	r2, r7, r0
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	4915      	ldr	r1, [pc, #84]	; (8000904 <IO_Port_Conf+0x158>)
 80008b0:	5c8a      	ldrb	r2, [r1, r2]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	408a      	lsls	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	609a      	str	r2, [r3, #8]
				IO_PORTx->OSPEEDR |= ((io_port_parameter->Out_SPEED) & (0x3 << SHIFT_NUM_2[i]));
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	1839      	adds	r1, r7, r0
 80008ca:	7809      	ldrb	r1, [r1, #0]
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <IO_Port_Conf+0x158>)
 80008ce:	5c41      	ldrb	r1, [r0, r1]
 80008d0:	0008      	movs	r0, r1
 80008d2:	2103      	movs	r1, #3
 80008d4:	4081      	lsls	r1, r0
 80008d6:	400b      	ands	r3, r1
 80008d8:	431a      	orrs	r2, r3
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	609a      	str	r2, [r3, #8]
			}

			if(((IO_PORTx->MODER) & (0x3 << SHIFT_NUM_2[i])) == (0x2 << SHIFT_NUM_2[i]))
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	681b      	ldr	r3, [r3, #0]
	for(uint8_t i = 0; i < 16; i++)
 80008e2:	210f      	movs	r1, #15
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	3201      	adds	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	230f      	movs	r3, #15
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d800      	bhi.n	80008fa <IO_Port_Conf+0x14e>
 80008f8:	e764      	b.n	80007c4 <IO_Port_Conf+0x18>
			{
				// オルタネート機能を使う際に実装する。
			}
		}
	}
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}
 8000904:	08001158 	.word	0x08001158

08000908 <IO_Write>:

void IO_Write(GPIO_TypeDef *Port, const uint16_t bit, const IO_State_t bit_Status)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	0008      	movs	r0, r1
 8000912:	0011      	movs	r1, r2
 8000914:	1cbb      	adds	r3, r7, #2
 8000916:	1c02      	adds	r2, r0, #0
 8000918:	801a      	strh	r2, [r3, #0]
 800091a:	1c7b      	adds	r3, r7, #1
 800091c:	1c0a      	adds	r2, r1, #0
 800091e:	701a      	strb	r2, [r3, #0]
	if(bit_Status != IO_RST)
 8000920:	1c7b      	adds	r3, r7, #1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d007      	beq.n	8000938 <IO_Write+0x30>
	{
		Port->ODR |= bit;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	1cbb      	adds	r3, r7, #2
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	615a      	str	r2, [r3, #20]
	}
	else
	{
		Port->ODR &= (~(bit));
	}
}
 8000936:	e007      	b.n	8000948 <IO_Write+0x40>
		Port->ODR &= (~(bit));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	1cba      	adds	r2, r7, #2
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	43d2      	mvns	r2, r2
 8000942:	401a      	ands	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	615a      	str	r2, [r3, #20]
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <IO_Toggle>:

void IO_Toggle(GPIO_TypeDef *Port, const uint16_t bit)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	000a      	movs	r2, r1
 800095a:	1cbb      	adds	r3, r7, #2
 800095c:	801a      	strh	r2, [r3, #0]
	Port->ODR ^= bit;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	1cbb      	adds	r3, r7, #2
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	405a      	eors	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	615a      	str	r2, [r3, #20]
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}

08000974 <Read_Psw>:
 * 基本関数本体を定義する場所。
 * 各種初期設定関数もここに定義する。
 * 尚、割り込みコールバック関数は別で定義する。
 */
void Read_Psw(uint16_t *buff)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uint16_t read_data = ((PSW_PORT->IDR) & PSW_BIT);
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	b29a      	uxth	r2, r3
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	0159      	lsls	r1, r3, #5
 8000988:	200e      	movs	r0, #14
 800098a:	183b      	adds	r3, r7, r0
 800098c:	400a      	ands	r2, r1
 800098e:	801a      	strh	r2, [r3, #0]

	*buff = Chattering_Reduction(read_data);
 8000990:	183b      	adds	r3, r7, r0
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f809 	bl	80009ac <Chattering_Reduction>
 800099a:	0003      	movs	r3, r0
 800099c:	001a      	movs	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	801a      	strh	r2, [r3, #0]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <Chattering_Reduction>:

uint16_t Chattering_Reduction(const uint16_t psw)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	801a      	strh	r2, [r3, #0]
	static uint16_t buff_0, buff_1, Reduction_buffer = 0;

	buff_0 = psw;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <Chattering_Reduction+0x58>)
 80009ba:	1dba      	adds	r2, r7, #6
 80009bc:	8812      	ldrh	r2, [r2, #0]
 80009be:	801a      	strh	r2, [r3, #0]
	Reduction_buffer &= (buff_0 | buff_1);
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <Chattering_Reduction+0x58>)
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <Chattering_Reduction+0x5c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <Chattering_Reduction+0x60>)
 80009ce:	8812      	ldrh	r2, [r2, #0]
 80009d0:	4013      	ands	r3, r2
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <Chattering_Reduction+0x60>)
 80009d6:	801a      	strh	r2, [r3, #0]
	Reduction_buffer |= (buff_0 & buff_1);
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <Chattering_Reduction+0x58>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <Chattering_Reduction+0x5c>)
 80009de:	8812      	ldrh	r2, [r2, #0]
 80009e0:	4013      	ands	r3, r2
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <Chattering_Reduction+0x60>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <Chattering_Reduction+0x60>)
 80009ee:	801a      	strh	r2, [r3, #0]
	buff_1 = buff_0;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Chattering_Reduction+0x58>)
 80009f2:	881a      	ldrh	r2, [r3, #0]
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <Chattering_Reduction+0x5c>)
 80009f6:	801a      	strh	r2, [r3, #0]

	return Reduction_buffer;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <Chattering_Reduction+0x60>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000470 	.word	0x20000470
 8000a08:	20000472 	.word	0x20000472
 8000a0c:	20000474 	.word	0x20000474

08000a10 <main>:

int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	uint8_t psw_second_cancel = 0;
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]

	if(System_Config(3U) != Ret_OK)
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff fd19 	bl	8000454 <System_Config>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x1a>
	{
		Program_Error();
 8000a26:	f000 f9b9 	bl	8000d9c <Program_Error>
	}

	Sys_Clock_Conf();
 8000a2a:	f000 f843 	bl	8000ab4 <Sys_Clock_Conf>
	Timer_Setup();
 8000a2e:	f000 f88f 	bl	8000b50 <Timer_Setup>
	IO_Port_Setup();
 8000a32:	f000 f8e9 	bl	8000c08 <IO_Port_Setup>

	Timer_Start_IT(&tim16_handle);
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <main+0x98>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fabd 	bl	8000fb8 <Timer_Start_IT>
	Timer_Start_IT(&tim17_handle);
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <main+0x9c>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fab9 	bl	8000fb8 <Timer_Start_IT>

	while(1)
	{
		if(psw_second_cancel == 0 && (psw_data & PSW_BIT) == PSW_BIT)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d117      	bne.n	8000a7e <main+0x6e>
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <main+0xa0>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0152      	lsls	r2, r2, #5
 8000a56:	4013      	ands	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	015b      	lsls	r3, r3, #5
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d10d      	bne.n	8000a7e <main+0x6e>
		{
			IO_Toggle(LED_PORT, LED_BIT);
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	011a      	lsls	r2, r3, #4
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff6f 	bl	8000950 <IO_Toggle>
			psw_second_cancel++;
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	3201      	adds	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e010      	b.n	8000aa0 <main+0x90>
		}
		else if(psw_second_cancel != 0 && (psw_data & PSW_BIT) != PSW_BIT)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00c      	beq.n	8000aa0 <main+0x90>
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <main+0xa0>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	0152      	lsls	r2, r2, #5
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d002      	beq.n	8000aa0 <main+0x90>
		{
			psw_second_cancel = 0;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		}
		Program_Delay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fd11 	bl	80004c8 <Program_Delay>
		if(psw_second_cancel == 0 && (psw_data & PSW_BIT) == PSW_BIT)
 8000aa6:	e7ce      	b.n	8000a46 <main+0x36>
 8000aa8:	2000042c 	.word	0x2000042c
 8000aac:	20000448 	.word	0x20000448
 8000ab0:	20000464 	.word	0x20000464

08000ab4 <Sys_Clock_Conf>:
	}
}

void Sys_Clock_Conf(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
	OSC_Config_t osc_conf = {0};
 8000aba:	2408      	movs	r4, #8
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2318      	movs	r3, #24
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f000 faee 	bl	80010a6 <memset>
	Clock_Config_t clk_conf = {0};
 8000aca:	003b      	movs	r3, r7
 8000acc:	0018      	movs	r0, r3
 8000ace:	2305      	movs	r3, #5
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f000 fae7 	bl	80010a6 <memset>

	PWR->CR1 |= 0x01;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <Sys_Clock_Conf+0x94>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <Sys_Clock_Conf+0x94>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]

	osc_conf.OSC_TYP = (RCC_CR_HSION | RCC_CR_PLLON);
 8000ae4:	0021      	movs	r1, r4
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <Sys_Clock_Conf+0x98>)
 8000aea:	601a      	str	r2, [r3, #0]
	osc_conf.PLL.PLL_SRC = PLLSRC_HSI;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2202      	movs	r2, #2
 8000af0:	721a      	strb	r2, [r3, #8]
	osc_conf.PLL.PLL_EN = RCC_PLLCFGR_PLLREN;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	0552      	lsls	r2, r2, #21
 8000af8:	60da      	str	r2, [r3, #12]
	osc_conf.PLL.PLLN = 0x08;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2208      	movs	r2, #8
 8000afe:	741a      	strb	r2, [r3, #16]
	osc_conf.PLL.PLLM = 0x00;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	745a      	strb	r2, [r3, #17]
	osc_conf.PLL.PLLR = 0x01;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2201      	movs	r2, #1
 8000b0a:	749a      	strb	r2, [r3, #18]
	if(OSC_Conf(&osc_conf) != Ret_OK)
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fcfa 	bl	8000508 <OSC_Conf>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <Sys_Clock_Conf+0x68>
	{
		Program_Error();
 8000b18:	f000 f940 	bl	8000d9c <Program_Error>
	}

	clk_conf.APB_PSC = 0x00;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	709a      	strb	r2, [r3, #2]
	clk_conf.AHB_PSC = 0x00;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	70da      	strb	r2, [r3, #3]
	clk_conf.SysCLK_SRC = RCC_CFGR_SW_1;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	711a      	strb	r2, [r3, #4]
	if(CLK_Conf(&clk_conf, 0x02) != Ret_OK)
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2102      	movs	r1, #2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fd90 	bl	8000658 <CLK_Conf>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <Sys_Clock_Conf+0x8c>
	{
		Program_Error();
 8000b3c:	f000 f92e 	bl	8000d9c <Program_Error>
	}
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b009      	add	sp, #36	; 0x24
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	40007000 	.word	0x40007000
 8000b4c:	01000100 	.word	0x01000100

08000b50 <Timer_Setup>:

static void Timer_Setup(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= RCC_APBENR2_TIM16EN;
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <Timer_Setup+0x9c>)
 8000b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <Timer_Setup+0x9c>)
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	0289      	lsls	r1, r1, #10
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40

	tim16_handle.Inst = TIM16;
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b64:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <Timer_Setup+0xa4>)
 8000b66:	601a      	str	r2, [r3, #0]
	tim16_handle.TIM_IRQn = TIM16_IRQn;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b6a:	2215      	movs	r2, #21
 8000b6c:	711a      	strb	r2, [r3, #4]
	tim16_handle.TIM_PSC = (640 - 1);
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <Timer_Setup+0xa8>)
 8000b72:	609a      	str	r2, [r3, #8]
	tim16_handle.TIM_ARR = (1000 - 1);
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <Timer_Setup+0xac>)
 8000b78:	60da      	str	r2, [r3, #12]
	tim16_handle.TIM_CR1 = (TIM_CR1_URS);
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	611a      	str	r2, [r3, #16]
	tim16_handle.TIM_CR2 = 0;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
	tim16_handle.DMA_IT_MODE = TIM_DIER_UIE;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	619a      	str	r2, [r3, #24]
	if(Timer_Conf(&tim16_handle) != Ret_OK)
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <Timer_Setup+0xa0>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 f9d0 	bl	8000f34 <Timer_Conf>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <Timer_Setup+0x4c>
	{
		Program_Error();
 8000b98:	f000 f900 	bl	8000d9c <Program_Error>
	}

	RCC->APBENR2 |= RCC_APBENR2_TIM17EN;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <Timer_Setup+0x9c>)
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <Timer_Setup+0x9c>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	02c9      	lsls	r1, r1, #11
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40

	tim17_handle.Inst = TIM17;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <Timer_Setup+0xb0>)
 8000bac:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <Timer_Setup+0xb4>)
 8000bae:	601a      	str	r2, [r3, #0]
	tim17_handle.TIM_IRQn = TIM17_IRQn;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <Timer_Setup+0xb0>)
 8000bb2:	2216      	movs	r2, #22
 8000bb4:	711a      	strb	r2, [r3, #4]
	tim17_handle.TIM_PSC = (64-1);
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <Timer_Setup+0xb0>)
 8000bb8:	223f      	movs	r2, #63	; 0x3f
 8000bba:	609a      	str	r2, [r3, #8]
	tim17_handle.TIM_ARR = (50-1);
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <Timer_Setup+0xb0>)
 8000bbe:	2231      	movs	r2, #49	; 0x31
 8000bc0:	60da      	str	r2, [r3, #12]
	tim17_handle.TIM_CR1 = TIM_CR1_URS;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <Timer_Setup+0xb0>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	611a      	str	r2, [r3, #16]
	tim17_handle.TIM_CR2 = 0;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <Timer_Setup+0xb0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
	tim17_handle.DMA_IT_MODE = TIM_DIER_UIE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <Timer_Setup+0xb0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	619a      	str	r2, [r3, #24]
	if(Timer_Conf(&tim17_handle) != Ret_OK)
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <Timer_Setup+0xb0>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f9ac 	bl	8000f34 <Timer_Conf>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <Timer_Setup+0x94>
	{
		Program_Error();
 8000be0:	f000 f8dc 	bl	8000d9c <Program_Error>
	}
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	2000042c 	.word	0x2000042c
 8000bf4:	40014400 	.word	0x40014400
 8000bf8:	0000027f 	.word	0x0000027f
 8000bfc:	000003e7 	.word	0x000003e7
 8000c00:	20000448 	.word	0x20000448
 8000c04:	40014800 	.word	0x40014800

08000c08 <IO_Port_Setup>:

static void IO_Port_Setup(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
	IO_Port_Config_t io_conf = {0};
 8000c0e:	003b      	movs	r3, r7
 8000c10:	0018      	movs	r0, r3
 8000c12:	2320      	movs	r3, #32
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f000 fa45 	bl	80010a6 <memset>

	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <IO_Port_Setup+0xb8>)
 8000c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <IO_Port_Setup+0xb8>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34

	io_conf.Inst = GPIOA;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	22a0      	movs	r2, #160	; 0xa0
 8000c2c:	05d2      	lsls	r2, r2, #23
 8000c2e:	601a      	str	r2, [r3, #0]
	io_conf.IO_BIT = ((1 << 11) | 1 << 12);
 8000c30:	003b      	movs	r3, r7
 8000c32:	22c0      	movs	r2, #192	; 0xc0
 8000c34:	0152      	lsls	r2, r2, #5
 8000c36:	809a      	strh	r2, [r3, #4]
	io_conf.IO_MODE = ((0x1 << GPIO_MODER_MODE11_Pos) | (0x0 << GPIO_MODER_MODE12_Pos));
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	03d2      	lsls	r2, r2, #15
 8000c3e:	609a      	str	r2, [r3, #8]
	io_conf.Out_TYPE = (0x0 << GPIO_OTYPER_OT11_Pos);
 8000c40:	003b      	movs	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
	io_conf.Out_SPEED = (0x2 << GPIO_OSPEEDR_OSPEED11_Pos);
 8000c46:	003b      	movs	r3, r7
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	611a      	str	r2, [r3, #16]
	io_conf.PU_PD = (0x2 << GPIO_PUPDR_PUPD12_Pos);
 8000c4e:	003b      	movs	r3, r7
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0492      	lsls	r2, r2, #18
 8000c54:	615a      	str	r2, [r3, #20]
	IO_Port_Conf(&io_conf);
 8000c56:	003b      	movs	r3, r7
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fda7 	bl	80007ac <IO_Port_Conf>

	IO_Write(GPIOA, (1 << 11), IO_RST);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	0119      	lsls	r1, r3, #4
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2200      	movs	r2, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fe4d 	bl	8000908 <IO_Write>


	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <IO_Port_Setup+0xb8>)
 8000c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <IO_Port_Setup+0xb8>)
 8000c74:	2102      	movs	r1, #2
 8000c76:	430a      	orrs	r2, r1
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34

	io_conf.Inst = GPIOB;
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <IO_Port_Setup+0xbc>)
 8000c7e:	601a      	str	r2, [r3, #0]
	io_conf.IO_BIT = (1 << 7);
 8000c80:	003b      	movs	r3, r7
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	809a      	strh	r2, [r3, #4]
	io_conf.IO_MODE = (0x1 << GPIO_MODER_MODE7_Pos);
 8000c86:	003b      	movs	r3, r7
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	01d2      	lsls	r2, r2, #7
 8000c8c:	609a      	str	r2, [r3, #8]
	io_conf.Out_TYPE = (0x0 << GPIO_OTYPER_OT7_Pos);
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
	io_conf.Out_SPEED = (0x2 << GPIO_OSPEEDR_OSPEED7_Pos);
 8000c94:	003b      	movs	r3, r7
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0212      	lsls	r2, r2, #8
 8000c9a:	611a      	str	r2, [r3, #16]
	io_conf.PU_PD = 0;
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
	IO_Port_Conf(&io_conf);
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fd81 	bl	80007ac <IO_Port_Conf>

	IO_Write(GPIOB, (1 << 7), IO_RST);
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <IO_Port_Setup+0xbc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fe29 	bl	8000908 <IO_Write>
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b008      	add	sp, #32
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <Timer_Period_Callback>:
 *
 * <重要事項>
 * 各コールバック関数内で別の割り込みを使用しない事。
 */
void Timer_Period_Callback(Timer_Handle_t *timer_handle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if((timer_handle->Inst) == TIM16)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <Timer_Period_Callback+0xb0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d103      	bne.n	8000ce2 <Timer_Period_Callback+0x1a>
	{
		Read_Psw(&psw_data);
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <Timer_Period_Callback+0xb4>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fe49 	bl	8000974 <Read_Psw>
	}

	if((timer_handle->Inst) == TIM17)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <Timer_Period_Callback+0xb8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d141      	bne.n	8000d70 <Timer_Period_Callback+0xa8>
	{
		static uint32_t duty = 0;

		duty = cos_table[duty_counter];
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <Timer_Period_Callback+0xbc>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <Timer_Period_Callback+0xc0>)
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	58d2      	ldr	r2, [r2, r3]
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <Timer_Period_Callback+0xc4>)
 8000cf8:	601a      	str	r2, [r3, #0]
		if(200 > timer_counter && timer_counter >= duty)
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2bc7      	cmp	r3, #199	; 0xc7
 8000d00:	d80c      	bhi.n	8000d1c <Timer_Period_Callback+0x54>
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <Timer_Period_Callback+0xc4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d306      	bcc.n	8000d1c <Timer_Period_Callback+0x54>
		{
			IO_Write(WAVE_LED_PORT, WAVE_LED_BIT, IO_RST);
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <Timer_Period_Callback+0xcc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff fdf7 	bl	8000908 <IO_Write>
 8000d1a:	e00d      	b.n	8000d38 <Timer_Period_Callback+0x70>
		}
		else if(duty > timer_counter && timer_counter >= 0)
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <Timer_Period_Callback+0xc4>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d907      	bls.n	8000d38 <Timer_Period_Callback+0x70>
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
		{
			IO_Write(WAVE_LED_PORT, WAVE_LED_BIT, IO_SET);
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <Timer_Period_Callback+0xcc>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fde8 	bl	8000908 <IO_Write>
		}

		timer_counter++;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d40:	601a      	str	r2, [r3, #0]
		if(timer_counter > 200)
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2bc8      	cmp	r3, #200	; 0xc8
 8000d48:	d912      	bls.n	8000d70 <Timer_Period_Callback+0xa8>
		{
			timer_counter = 0;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <Timer_Period_Callback+0xc8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

			duty_counter++;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <Timer_Period_Callback+0xbc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <Timer_Period_Callback+0xbc>)
 8000d58:	601a      	str	r2, [r3, #0]
			if(duty_counter >= table_length)
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <Timer_Period_Callback+0xd0>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	001a      	movs	r2, r3
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <Timer_Period_Callback+0xbc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d802      	bhi.n	8000d70 <Timer_Period_Callback+0xa8>
			{
				duty_counter = 0;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <Timer_Period_Callback+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40014400 	.word	0x40014400
 8000d7c:	20000464 	.word	0x20000464
 8000d80:	40014800 	.word	0x40014800
 8000d84:	20000468 	.word	0x20000468
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000478 	.word	0x20000478
 8000d90:	2000046c 	.word	0x2000046c
 8000d94:	50000400 	.word	0x50000400
 8000d98:	20000408 	.word	0x20000408

08000d9c <Program_Error>:
/*
 * エラー処理関数本体を定義する場所。
 * ステータスエラー時等の処理をここでする。
 */
void Program_Error(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	while(1);
 8000da4:	e7fe      	b.n	8000da4 <Program_Error+0x8>
	...

08000da8 <__NVIC_EnableIRQ>:
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	; 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriority>:
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eca:	d813      	bhi.n	8000ef4 <__NVIC_GetPriority+0x3c>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <__NVIC_GetPriority+0x74>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	33c0      	adds	r3, #192	; 0xc0
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589a      	ldr	r2, [r3, r2]
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	40da      	lsrs	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	099b      	lsrs	r3, r3, #6
 8000eee:	2203      	movs	r2, #3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	e017      	b.n	8000f24 <__NVIC_GetPriority+0x6c>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <__NVIC_GetPriority+0x78>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0019      	movs	r1, r3
 8000efc:	230f      	movs	r3, #15
 8000efe:	400b      	ands	r3, r1
 8000f00:	3b08      	subs	r3, #8
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3306      	adds	r3, #6
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0019      	movs	r1, r3
 8000f14:	2303      	movs	r3, #3
 8000f16:	400b      	ands	r3, r1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	40da      	lsrs	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	099b      	lsrs	r3, r3, #6
 8000f20:	2203      	movs	r2, #3
 8000f22:	4013      	ands	r3, r2
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Timer_Conf>:

/*
 * タイマー制御関数の本体を定義する場所。
 */
ErrorStatus_t Timer_Conf(Timer_Handle_t *timer_parameter)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	TIM_TypeDef *TIMx = timer_parameter->Inst;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]

	  do{
	    if (((TIMx)->CCER & ((uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E))) == 0UL)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <Timer_Conf+0x7c>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d10b      	bne.n	8000f64 <Timer_Conf+0x30>
	    {
	      if(((TIMx)->CCER & ((uint32_t)(TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE))) == 0UL)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <Timer_Conf+0x80>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	d106      	bne.n	8000f64 <Timer_Conf+0x30>
	      {
	        (TIMx)->CR1 &= ~(TIM_CR1_CEN);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4393      	bics	r3, r2
 8000f5e:	001a      	movs	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	601a      	str	r2, [r3, #0]
	      }
	    }
	  }while(0);

	TIMx->CR1 = (uint32_t)(timer_parameter->TIM_CR1);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	601a      	str	r2, [r3, #0]
	TIMx->ARR = (uint32_t)(timer_parameter->TIM_ARR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->PSC = (uint32_t)(timer_parameter->TIM_PSC);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->CR2 = (uint32_t)(timer_parameter->TIM_CR2);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	605a      	str	r2, [r3, #4]

	TIMx->EGR = TIM_EGR_UG;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	615a      	str	r2, [r3, #20]

	if(((TIMx->SR) & TIM_SR_UIF_Msk) == TIM_SR_UIF)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d106      	bne.n	8000fa4 <Timer_Conf+0x70>
	{
		TIMx->SR &= (~(TIM_SR_UIF));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4393      	bics	r3, r2
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
	}

	return Ret_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	00001111 	.word	0x00001111
 8000fb4:	00000444 	.word	0x00000444

08000fb8 <Timer_Start_IT>:

ErrorStatus_t Timer_Start_IT(Timer_Handle_t *timer_handle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	TIM_TypeDef *TIMx = timer_handle->Inst;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]

	if((timer_handle->DMA_IT_MODE) != 0x0000)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d016      	beq.n	8000ffc <Timer_Start_IT+0x44>
	{
		NVIC_SetPriority((timer_handle->TIM_IRQn), 0);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff ff00 	bl	8000ddc <__NVIC_SetPriority>
		if(NVIC_GetPriority(timer_handle->TIM_IRQn) != 0)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff68 	bl	8000eb8 <__NVIC_GetPriority>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <Timer_Start_IT+0x38>
		{
			return Ret_Fail;
 8000fec:	2302      	movs	r3, #2
 8000fee:	e010      	b.n	8001012 <Timer_Start_IT+0x5a>
		}

		NVIC_EnableIRQ((timer_handle->TIM_IRQn));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff fed6 	bl	8000da8 <__NVIC_EnableIRQ>
	}

	TIMx->DIER = (timer_handle->DMA_IT_MODE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699a      	ldr	r2, [r3, #24]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	60da      	str	r2, [r3, #12]

	TIMx->CR1 |= TIM_CR1_CEN;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	601a      	str	r2, [r3, #0]

	return Ret_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}

0800101a <Timer_IT_Handler>:

void Timer_IT_Handler(Timer_Handle_t *timer_handle)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	TIM_TypeDef *TIMx = timer_handle->Inst;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]

	if(((TIMx->SR) & TIM_SR_UIF_Msk) == TIM_SR_UIF)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10a      	bne.n	800104a <Timer_IT_Handler+0x30>
	{
		Timer_Period_Callback(timer_handle);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fe46 	bl	8000cc8 <Timer_Period_Callback>
		TIMx->SR &= (~(TIM_SR_UIF));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2201      	movs	r2, #1
 8001042:	4393      	bics	r3, r2
 8001044:	001a      	movs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	611a      	str	r2, [r3, #16]
	}
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff f8e0 	bl	800021c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001082:	f000 f819 	bl	80010b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001086:	f7ff fcc3 	bl	8000a10 <main>

0800108a <LoopForever>:

LoopForever:
  b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8001098:	08001170 	.word	0x08001170
  ldr r2, =_sbss
 800109c:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80010a0:	2000047c 	.word	0x2000047c

080010a4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_COMP_IRQHandler>

080010a6 <memset>:
 80010a6:	0003      	movs	r3, r0
 80010a8:	1882      	adds	r2, r0, r2
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d100      	bne.n	80010b0 <memset+0xa>
 80010ae:	4770      	bx	lr
 80010b0:	7019      	strb	r1, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	e7f9      	b.n	80010aa <memset+0x4>
	...

080010b8 <__libc_init_array>:
 80010b8:	b570      	push	{r4, r5, r6, lr}
 80010ba:	2600      	movs	r6, #0
 80010bc:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <__libc_init_array+0x38>)
 80010be:	4d0d      	ldr	r5, [pc, #52]	; (80010f4 <__libc_init_array+0x3c>)
 80010c0:	1b64      	subs	r4, r4, r5
 80010c2:	10a4      	asrs	r4, r4, #2
 80010c4:	42a6      	cmp	r6, r4
 80010c6:	d109      	bne.n	80010dc <__libc_init_array+0x24>
 80010c8:	2600      	movs	r6, #0
 80010ca:	f000 f819 	bl	8001100 <_init>
 80010ce:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <__libc_init_array+0x40>)
 80010d0:	4d0a      	ldr	r5, [pc, #40]	; (80010fc <__libc_init_array+0x44>)
 80010d2:	1b64      	subs	r4, r4, r5
 80010d4:	10a4      	asrs	r4, r4, #2
 80010d6:	42a6      	cmp	r6, r4
 80010d8:	d105      	bne.n	80010e6 <__libc_init_array+0x2e>
 80010da:	bd70      	pop	{r4, r5, r6, pc}
 80010dc:	00b3      	lsls	r3, r6, #2
 80010de:	58eb      	ldr	r3, [r5, r3]
 80010e0:	4798      	blx	r3
 80010e2:	3601      	adds	r6, #1
 80010e4:	e7ee      	b.n	80010c4 <__libc_init_array+0xc>
 80010e6:	00b3      	lsls	r3, r6, #2
 80010e8:	58eb      	ldr	r3, [r5, r3]
 80010ea:	4798      	blx	r3
 80010ec:	3601      	adds	r6, #1
 80010ee:	e7f2      	b.n	80010d6 <__libc_init_array+0x1e>
 80010f0:	08001168 	.word	0x08001168
 80010f4:	08001168 	.word	0x08001168
 80010f8:	0800116c 	.word	0x0800116c
 80010fc:	08001168 	.word	0x08001168

08001100 <_init>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr

0800110c <_fini>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001112:	bc08      	pop	{r3}
 8001114:	469e      	mov	lr, r3
 8001116:	4770      	bx	lr
